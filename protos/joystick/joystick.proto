syntax = "proto3";

package mavsdk.rpc.joystick;

option java_package = "io.mavsdk.joystick";
option java_outer_classname = "JoystickProto";

service joystickService
{

    rpc ConnectDrone (ConnectRequest)  returns (ConnectResponse) {}
    /*
     * Send command to enable Joystick mode 
     *
     * Enabling Joystic mode causes to change into Position Control mode
     * drone still needs to be armed
     * Needs to check if the drone is not currently flying or in mission if so drone needs to be paused first 
     */
    
    rpc EnableJoystickMode (EnableRequest)  returns(EnableResponse) {}



    rpc ArmDrone (ArmRequest) returns (ArmResponse) {}


    rpc DisarmDrone (DisarmRequest) returns (DisarmResponse) {}

      /*
     * Send command to command to the drone to move forwards or backwards 
     */
    rpc Xmotion (XmotionRequest) returns (XmotionResponse) {}

     /*
     * Send command to command to the drone to move left or right 
     */
    rpc Ymotion (YmotionRequest) returns (YmotionResponse) {}

     /*
     * Send command to command to the drone to move up  or down 
     */
    rpc Zmotion (ZmotionRequest) returns (ZmotionResponse) {}

     /*
     * Send command to command to rotate clockwise or counterclockwise 
     */
    rpc Rmotion (RmotionRequest) returns (RmotionResponse) {}



}

message ConnectRequest{
    int32 target =1 ;
}

message ConnectResponse{
    JoystickResult joystick_result = 1;
}

message EnableRequest{}
message EnableResponse{
    JoystickResult joystick_result = 1;
}


message ArmRequest {
    uint32 armedbutton =1; 
}
message ArmResponse {
    JoystickResult joystick_result = 1;
}

message DisarmRequest {
    uint32 disarmedbutton =1; 
}
message DisarmResponse {
    JoystickResult joystick_result = 1;
}




message XmotionRequest {
    sint32 xmotion = 1 ;                    // value between -1000 to 1000. negative-> backwards, positive-> forwards 
}
message XmotionResponse{
    JoystickResult joystick_result = 1 ;
}

message YmotionRequest {
    sint32 Ymotion = 1 ;                    // value between -1000 to 1000. negative-> left, positive--> right
}
message YmotionResponse{
    JoystickResult joystick_result = 1 ;
}


message ZmotionRequest {
    sint32 Ymotion = 1 ;                    // value between -1000 to 1000. negative-> down ,positive--> up 
}
message ZmotionResponse{
    JoystickResult joystick_result = 1 ;
}


message RmotionRequest {
    sint32 Revolve = 1 ;                    // value between -1000 to 1000. negative-> ccw ,positive- -> cw 
}
message RmotionResponse{
    JoystickResult joystick_result = 1 ;
}


message JoystickResult {

    enum Result {

        RESULT_UNKNOWN = 0; // Unknown result
        RESULT_SUCCESS = 1; // Request was successful
        RESULT_NO_SYSTEM = 2; // No system is connected
        RESULT_CONNECTION_ERROR = 3; // Connection error
        RESULT_BUSY = 4; // Vehicle is busy
        RESULT_COMMAND_DENIED = 5; // Command refused by vehicle
        RESULT_TIMEOUT = 6; // Request timed out

    } 

    Result result = 1; // Result enum value
    string result_str = 2; // Human-readable English string describing the result
}







